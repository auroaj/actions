name: Tag release candidates when changes are commited on release branches
on:
  push:
    branches:
      - "release/**"

concurrency: ${{ github.workflow }}

jobs:
  tag-release-candidate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.push.ref }}

      - name: Fetch available tags
        run: |
          git fetch --unshallow --tags

      - name: Get latest release candidate tag
        id: latest_release_candidate_tag
        run: |
          RELEASE_VERSION=$(echo "${{ github.ref_name }}" | cut -d "/" -f 2)
          LATEST_FOUND_TAG=$(git tag -l --sort=-creatordate "${RELEASE_VERSION}-*" | sort -Vr | head -n 1)
          if [ -z ${LATEST_FOUND_TAG} ];then
            echo "Release candidate not found, starting from RC1"
            LATEST_FOUND_TAG=${RELEASE_VERSION}-rc0
          fi
          echo "::set-output name=LATEST_TAG::${LATEST_FOUND_TAG}"
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"
          echo "${RELEASE_VERSION}"
          echo "${LATEST_TAG}"

      - name: Bump release candidate version
        id: bump_version
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${{ steps.latest_release_candidate_tag.outputs.LATEST_TAG }}
          version-fragment: 'rc'

      - name: Create new release candidate tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.bump_version.outputs.next-version }}',
              sha: context.sha
            })

      - name: Move floating release version tag to new commit
        uses: actions/github-script@v6
        with:
          script: |
            console.log("trying update tag", "${{ steps.latest_release_candidate_tag.outputs.RELEASE_VERSION }}");
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.latest_release_candidate_tag.outputs.RELEASE_VERSION }}',
              sha: context.sha,
              force: true
            });
            try {
              console.log("trying delete tag", "${{ steps.latest_release_candidate_tag.outputs.RELEASE_VERSION }}");
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: '${{ steps.latest_release_candidate_tag.outputs.RELEASE_VERSION }}',
                sha: context.sha,
                force: true
              });
            }
            catch {
              console.log("Update failed");
              console.log("creating tag");
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ steps.latest_release_candidate_tag.outputs.RELEASE_VERSION }}',
                sha: context.sha
              });
            }
            


          # await github.rest.git.updateRef({
          #     owner: context.repo.owner,
          #     repo: context.repo.repo,
          #     ref: 'refs/tags/${{ steps.latest_release_candidate_tag.outputs.RELEASE_VERSION }}',
          #     sha: context.sha,
          #     force: true
          #   });